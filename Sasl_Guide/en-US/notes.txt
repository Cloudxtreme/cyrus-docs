COPYING - Copyright statement
Where to get it
doc/install.html - Requirements (gnu make, etc.)
doc/windows.html
doc/macosx.html
doc/install.html - "Supported platforms"
Configure options
doc/advanced.html - "Cyrus SASL supports the option to compile all of the supported mechanisms and glue code into a single static library"
doc/readme.html - "thread safe"
Discuss how --prefix and --with-plugindir and --with-configdir=DIR need to match during configure stage, or things aren't going to work very well after install - e.g. pluginviewer will segfault.
Directory layout and files
(acting as) username versus authentication/admin user
INSTALL -
INSTALL and doc/install.html
doc/programming.html - "Application writers, instead of having to support every mechanism for every protocol, only need to support SASL for every protocol."
doc/programming.html - "Before SASL, when a new protocol was written which required authentication..."
doc/components.html - "The first thing to realize is that there is a difference between SASL, the protocol, and Cyrus SASL, the library."
doc/sysadmin.html - "SASL is only a framework: specific SASL mechanisms govern the exact protocol exchange."
doc/components.html - "The Cyrus SASL architechure is very modular, using loadable modules for things such as the mechanism profiles and the database access done by the auxillary property plugins."
doc/programming.html - "What does the Cyrus SASL library do?"
doc/programming.html - "What doesn't the Cyrus SASL library do?"
Security Layers
doc/programming.html - "All is well and good to securely authenticate, but if you don't have some sort of integrity or privacy layer, anyone can hijack your TCP session after authentication."
General Discussion
doc/components.html - "The application is a client of the SASL library."
doc/sysadmin.html - Authc and Authz concepts
doc/readme.html "There are two main ways to configure the SASL library for a given application. The first (and typically easiest) is to make use of the application's configuration files."
doc/readme.html "Alternatively, Cyrus SASL looks for configuration files in /usr/lib/sasl/Appname.conf where Appname is settable by the application"
doc/plugprog.html - Client Send First / Server Send Last
Discuss authentication and authorization.
doc/components.html - "The first component of the SASL library is affectionately called the glue layer."
Discuss Java JNI interface.
doc/install.html - "For Kerberos support, you'll need the kerberos libraries."
List the version of Cyrus SASL used in preparing the book
mech_list
doc/sysadmin.html - "Some notable applications that use the Cyrus SASL library include Sendmail, Cyrus imapd, and OpenLDAP."
doc/options.html
Password Verification Services
doc/install.html - "Not building them can also add performance improvements as it does take system resources to load a given plugin, even if that plugin is otherwise unused"
doc/programming.html
prop.h
reauth_timeout
Discuss SASL RFCs
Runtime configuration options
doc/sysadmin.html - "libsasl reads from /dev/random as part of its initialization."
saslutil.h
doc/sysadmin.html
doc/sysadmin.html - "Finally, system administrators should think if they want to enable "auto_transition."
name of calling application (for lower level logging)
local-ip-port: client IPv4/IPv6 domain literal string with port. if NULL, then mechanisms requiring IPaddr are disabled. The format is:
IP/port syntax:
 a.b.c.d;p              where a-d are 0-255 and p is 0-65535 port number.
 e:f:g:h:i:j:k:l;p      where e-l are 0000-ffff lower-case hexidecimal
 e:f:g:h:i:j:a.b.c.d;p  alternate syntax for previous

 Note that one or more "0" fields in f-k can be replaced with "::"
 Thus:                 e:f:0000:0000:0000:j:k:l;p
 can be abbreviated:   e:f::j:k:l;p

A buffer of size 52 is adequate for the longest format with NUL terminator.

remote-ip-port: server IPv4/IPv6 domain literal string with port. if NULL, then mechanisms requiring IPaddr are disabled.

Maximum security layer receive buffer size. 0=security layer not supported
min_ssf
max_ssf
property_names
property_values
SASL_CONF_PATH (sasl.h)
serverFQDN passwd to sasl_*_new. the fully qualified domain name of the server. NULL means use gethostname() or equivalent. Useful for multi-homed servers.
The service name passed to sasl_*_new. registered name of the service using SASL (e.g. "imap")
Security Considerations, including active attack versus passive attack.
forwardsec
maximum
mutual_auth
noactive
noanonymous
nodict
noplain
passcred
security_flags - valid on server and client side.
0 bits = no protection
112 bits = triple DES
128 bits = 128-bit RC2/RC4/BLOWFISH
1 bit = integrity protection only
256 bits = AES
40 bits = 40-bit DES or 40-bit RC2/RC4
56 bits = DES
infinite bits = Domain Socket? Is this true? Need to test.
Be sure to process the sasl man pages!!!
GS2-SCRAM: http://www.project-moonshot.org/gitweb/?p=cyrus-sasl.git;a=blob;f=plugins/gs2.c
Discuss the error: Failure: realm changed: authentication aborted
Realms.
defaultuserrealm
permits multiple user realms on server, NULL = default (server side - sasl_server_new



Auxiliary Properties
====================

doc/sysadmin.html - "auxprop: checks passwords agains the userPassword attribute supplied by an auxiliary property plugin."
config: auxprop_plugin
Auxprop Plugins
doc/components.html - "Auxiliary Property (or auxprop) plugins provide a database service for the glue layer"
doc/sysadmin.html - "sasldb stores the plaintext versions of all of its passwords. If it is compromised so are all of the passwords that it stores."
Discuss each known auxprop attribute, such as userPassword and cmusaslsecretOTP
giengerldap - http://southbrain.com/south/2008/06/writing-a-cyrus-sasl-ldap-auxp.html
LDAPDB
config: ldapdb_id
doc/install.html - "If you are using LDAPDB, you'll need SASL enabled OpenLDAP libraries."
config: ldapdb_mech
config: ldapdb_pw
config: ldapdb_rc
config: ldapdb_starttls
config: ldapdb_uri
SASLDB
sasldbconverter2
sasldblistusers2
config: sasldb_path
saslpasswd2
SQL
config: sql_database
config: sql_engine
config: sql_hostnames
config: sql_insert
config: sql_passwd
config: sql_select
config: sql_update
config: sql_user
config: sql_usessl
doc/readme.html "The library also supports storing user secrets in either a hash database (e.g. Berkeley DB, gdbm, ndbm), LDAP, or in a SQL database (MySQL, Postgres)."
doc/sysadmin.html - "The Cyrus SASL library also supports some "shared secret" authentication methods:"
User Canonicaliztion Plugins
config: canon_user_plugin
config: ldapdb_canon_attr
username canonicalization plugin and include some configuration examples.
doc/components.html - "Username Canonicalization plugins are not widely used, however..."
Discuss the INTERNAL sasl canonuser plugin.

Authentication Mechanisms
=========================

The ANONYMOUS Mechanism - best SSF: 0, supports setpass: no - NO_PLAINTEXT - WANT_CLIENT_FIRST|DONTUSE_USERPASSWD
doc/plugprog.html - "Client-side mechanism plugins are generally included in the same plugin with their server counterpart"
The CRAM-MD5 Mechanism - best SSF: 0, supports setpass: no - NO_ANONYMOUS|NO_PLAINTEXT - SERVER_FIRST
The DIGEST-MD5 Mechanism - best SSF: 128, supports setpass: no - NO_ANONYMOUS|NO_PLAINTEXT|MUTUAL_AUTH - PROXY_AUTHENTICATION
Discuss realms, and how they don't work with the DIGEST-MD5 mech (for cyrus sasl). What about other mechs? (hmmmm. Is this true? I think that maybe the plugin just dirives the realm for this mech.)
Cyrus SASL Distribution
The EXTERNAL Mechanism
The GSSAPI Mechanism - best SSF: 56, supports setpass: no - NO_ANONYMOUS|NO_PLAINTEXT|NO_ACTIVE|PASS_CREDENTIALS|MUTUAL_AUTH - WANT_CLIENT_FIRST|PROXY_AUTHENTICATION|DONTUSE_USERPASSWD
doc/gssapi.html
doc/install.html - "For GSSAPI support you will need either MIT Kerberos 5 , the Heimdal or CyberSafe implementation."
doc/sysadmin.html - "Is mechanism X supported?"
doc/components.html - "Kerberos Mechanisms"
doc/sysadmin.html - "Applications that wish to use a kerberos mechanism will need access to a service key, stored either in a "srvtab" file (Kerberos 4) or a "keytab" file (Kerberos 5)."
The KERBEROS_V4 Mechanism - best SSF: 56, supports setpass: ? - NO_ANONYMOUS|NO_PLAINTEXT|NO_ACTIVE|PASS_CREDENTIALS|MUTUAL_AUTH - WANT_SERVER_FIRST|?|DONTUSE_USERPASSWD
config: keytab
The LOGIN Mechanism - best SSF: 0, supports setpass: no - NO_ANONYMOUS|PASS_CREDENTIALS - (no features)
doc/sysadmin.html - "The LOGIN mechanism (not to be confused with IMAP4's LOGIN command) is an undocumented, unsupported mechanism."
SASL Mechanisms
doc/mechanisms.html
doc/install.html - "Currently we support PostgreSQL v7.2 (or higher) and MySQL. Currently MySQL, PostgreSQL, and SQLite are supported. (which is it?)"
The NTLM Mechanism - best SSF: 0, supports setpass: no - NO_ANONYMOUS|NO_PLAINTEXT - WANT_CLIENT_FIRST
http://davenport.sourceforge.net/ntlm.html
config: ntlm_server
config: ntlm_v2
config: opiekeys
Discuss OTP OPIE option.
The OTP Mechanism - best SSF: 0, supports setpass: yes - NO_ANONYMOUS|NO_PLAINTEXT|FORWARD_SECRECY - WANT_CLIENT_FIRST|PROXY_AUTHENTICATION
config: otp_mda
The PASSDSS Mechanism - best SSF: 112, supports setpass: no - NO_ANONYMOUS|NO_PLAINTEXT|NO_ACTIVE|NO_DICTIONARY|FORWARD_SECRECY|PASS_CREDENTIALS|MUTUAL_AUTH - WANT_CLIENT_FIRST|PROXY_AUTHENTICATION
The PLAIN Mechanism - best SSF: 0, supports setpass: no - NO_ANONYMOUS|PASS_CREDENTIALS - WANT_CLIENT_FIRST|PROXY_AUTHENTICATION
doc/sysadmin.html - "The PLAIN mechanism is not a secure method of authentication by itself."
Pluggable Authentication
plugin_list
doc/components.html - "Shared Secret Mechanisms"
Discuss the internal OpenLDAP slapd auxprop
Document IETF SASL mechanisms not supported by Cyrus SASL.
The SRP Mechanism - best SSF: 128, supports setpass: yes - NO_ANONYMOUS|NO_PLAINTEXT|NO_ACTIVE|NO_DICTIONARY|FORWARD_SECRECY|MUTUAL_AUTH - WANT_CLIENT_FIRST|PROXY_AUTHENTICATION
config: srp_mda
config: srvtab
doc/sysadmin.html - "The Cyrus SASL library also supports the One-Time-Password (OTP) mechanism."
APOP pseudo mechanism
assume_external_id
assume_external_security
authentication/admin user
external authentication ID (const char *). If the SASL_AUTH_EXTERNAL value is non-NULL, then a special version of the EXTERNAL mechanism is enabled (one for server-embedded EXTERNAL mechanisms). Otherwise, the EXTERNAL mechanism will be absent unless a plug-in including EXTERNAL is present.

Pwcheck
=======

what is the sasl option saslauthd_version???
Saslauthd LDAP is documented in - saslauthd/LDAP_SASLAUTHD
Do not enclose saslauthd.conf ldap options within quotes!
doc/sysadmin.html - "Courier-IMAP authdaemond: contacts Courier-IMAP's authdaemond daemon to check passwords."
config: authdaemond_path
config: auto_transition
doc/components.html - "Password Verification Mechanisms"
Other SASL Implementations
pwcheck
doc/sysadmin.html - "pwcheck: checks passwords with the use of a separate, helper daemon."
config: pwcheck_method
binary: saslauthd
doc/sysadmin.html - "saslauthd: contacts the saslauthd daemon to to check passwords using a variety of mechanisms."
config: saslauthd_path


Date: Wed, 19 Jan 2011 18:47:05 -0800
From: William Mills <wmills@yahoo-inc.com>
To: "kitten@ietf.org" <kitten@ietf.org>
Subject: [kitten] Oauth SASL mechanism implentation

Greetings.

Now that I've finally gotten permission to put my code out into open source I have an implementation of a
+SASL mechanism in the Cyrus SASL framework.  The draft spec (about to expire) is

        http://www.ietf.org/id/draft-mills-kitten-sasl-oauth-00.txt

and you can find the code at

        https://github.com/sweetums/SASL-OAuth

Many warts, and lots to fix, but it's out there.  TODO list includes:

-       work on channel binding with the newish Cyrus SASL source drop that includes it.
-       update to conform with the -11 or later OAuth2 core spec and the bearer token spec
-       update the draft spec to handle the above

Regards,

-bill


Include a note about how host based authorization is not possible with SASL/saslauthd, because that information (environment variables) is not passed down into the saslauthd mux.
saslauthd: pam
saslauthd: ldap
See my own thread on the Cyrus SASL list dated April 13th, 2010 concerning fast bind.
saslauthd.conf: ldap_auth_method
saslauthd.conf: ldap_bind_dn
saslauthd.conf: ldap_bind_pw
saslauthd.conf: ldap_default_domain
saslauthd.conf: ldap_default_realm
saslauthd.conf: ldap_deref
saslauthd.conf: ldap_filter
saslauthd.conf: ldap_group_attr
saslauthd.conf: ldap_group_dn
saslauthd.conf: ldap_group_filter
saslauthd.conf: ldap_group_match_method
saslauthd.conf: ldap_group_search_base
saslauthd.conf: ldap_group_scope
saslauthd.conf: ldap_password
saslauthd.conf: ldap_password_attr
saslauthd.conf: ldap_referrals
saslauthd.conf: ldap_restart
saslauthd.conf: ldap_id
saslauthd.conf: ldap_authz_id
saslauthd.conf: ldap_mech
saslauthd.conf: ldap_realm
saslauthd.conf: ldap_scope
saslauthd.conf: ldap_search_base
saslauthd.conf: ldap_servers
saslauthd.conf: ldap_start_tls
saslauthd.conf: ldap_time_limit
saslauthd.conf: ldap_timeout
saslauthd.conf: ldap_tls_check_peer
saslauthd.conf: ldap_tls_cacert_file
saslauthd.conf: ldap_tls_cacert_dir
saslauthd.conf: ldap_tls_ciphers
saslauthd.conf: ldap_tls_cacert
saslauthd.conf: ldap_tls_key
saslauthd.conf: ldap_use_sas
saslauthd.conf: ldap_version
Document the ldap_debug (e.g. ldap_debug: -1) option for saslauthd.conf, which is *not* documented in LDAP_SASLAUTHD.
Document the ldap_sasl_authc_id option for saslauthd.conf, which is *not* documented in LDAP_SASLAUTHD.
Document the ldap_sasl_authz_id option for saslauthd.conf, which is *not* documented in LDAP_SASLAUTHD.
Document the ldap_sasl_mech option for saslauthd.conf, which is *not* documented in LDAP_SASLAUTHD.
Document the ldap_sasl_realm option for saslauthd.conf, which is *not* documented in LDAP_SASLAUTHD.
Document the ldap_sasl_secprops option for saslauthd.conf, which is *not* documented in LDAP_SASLAUTHD.
Document the ldap_size_limit option for saslauthd.conf, which is *not* documented in LDAP_SASLAUTHD.
saslauthd: dce
saslauthd: getpwent
saslauthd: kerberos4
saslauthd: kerberos5
saslauthd: rimap
saslauthd: sasldb
saslauthd: shadow
saslauthd: sia
saslauthd: httpform is what???
Document the httpform_data option (required).
httpform_data is broken up into:
  user
  password
  service
  realm
Document the httpform_host option.
Document the httpform_port option.
Document the httpform_uri option (required).

FAQ/Debug
===

doc/sysadmin.html - "Debugging: Check syslog output (usually stored in /var/log) for more information."
Discuss all sasl errors.
config: log_level
sasl-sample-client
sasl-sample-server
saslfinger
doc/readme.html "Note that the library can use the environment variable SASL_PATH to locate the directory where the mechanisms are; this should be a colon-separated list of directories containing plugins. Otherwise it will default to the value of --with-plugindir as supplied to configure (which itself defaults to /usr/local/lib)."
doc/components.html - "Shared Secret Mechanisms"
saslpluginviewer
doc/programming.html - sample-client and sample-server
doc/components.html - "The simplest types of plugins to understand are those which provide SASL mechanisms, such as CRAM-MD5..."
testsaslauthd
doc/sysadmin.html - "Why doesn't mechanim X appear as an available mechanism?"
Mailing List
Bugzilla - http://bugzilla.andrew.cmu.edu/
http://www.oreillynet.com/pub/a/network/2002/04/09/sasl.html
http://www.oreillynet.com/pub/a/network/2002/04/30/sasl2.html
http://www.melnikov.ca/mel/devel/SASL_info.html
http://www-cs-students.stanford.edu/~tjw/srp/ndss.html
http://davenport.sourceforge.net/ntlm.html
http://www.snia.org/tech_activities/CIFS/CIFS-TR-1p00_FINAL.pdf




-----------------------

RFC 5056
  On the Use of Channel Bindings to Secure Channels

The main goal of channel binding is to be able to delegate cryptographic session protection to network layers below the application in hopes of being able to better leverage hardware implementations of cryptographic protocols.


